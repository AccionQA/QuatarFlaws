{
  "_embedded": {
    "findings": [
      {
        "issue_id": 23,
        "scan_type": "STATIC",
        "description": "<span>The program fails to release or incorrectly releases the variable _streamWriter, which was previously allocated by a call to system_runtime_dll.System.IO.StreamWriter.!newinit_0_1().</span> <span>Ensure that all code paths properly release this resource.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/404.html\">CWE</a></span>",
        "count": 1,
        "context_type": "APPLICATION",
        "context_guid": "9fb4b899-3162-45b8-a889-5008f482d54b",
        "violates_policy": false,
        "finding_status": {
          "first_found_date": "2024-11-25T10:47:11.498Z",
          "status": "OPEN",
          "resolution": "UNRESOLVED",
          "mitigation_review_status": "NONE",
          "new": false,
          "resolution_status": "NONE",
          "last_seen_date": "2024-12-26T06:03:30.031Z"
        },
        "finding_details": {
          "severity": 0,
          "cwe": {
            "id": 404,
            "name": "Improper Resource Shutdown or Release",
            "href": "https://api.veracode.com/appsec/v1/cwes/404"
          },
          "module": "microsoft.identitymodel.logging.dll",
          "relative_location": 45,
          "finding_category": {
            "id": 17,
            "name": "Code Quality",
            "href": "https://api.veracode.com/appsec/v1/categories/17"
          },
          "procedure": "microsoft_identitymodel_logging_dll.Microsoft.IdentityModel.Logging.TextWriterEventListener.!ctor",
          "exploitability": 0,
          "attack_vector": "system_runtime_dll.System.IO.StreamWriter.!newinit_0_1",
          "file_line_number": 1
        },
        "build_id": 45002049
      },
      {
        "issue_id": 24,
        "scan_type": "STATIC",
        "description": "<span>This function uses the system_security_cryptography_algorithms_dll.System.Security.Cryptography.SHA1.Create() function, which uses a hash algorithm that is considered weak. In recent years, researchers have demonstrated ways to breach many uses of previously-thought-safe hash functions such as MD5. </span> <span>Consider using a stronger algorithm in order to prevent attackers from being able to manipulate hash results. If this algorithm is being used to hash passwords, then consider using a strong computationally-hard algorithm such as PBKDF2 or bcrypt instead of a plain hashing algorithm.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/327.html\">CWE</a></span>",
        "count": 1,
        "context_type": "APPLICATION",
        "context_guid": "9fb4b899-3162-45b8-a889-5008f482d54b",
        "violates_policy": false,
        "finding_status": {
          "first_found_date": "2024-11-25T10:47:11.498Z",
          "status": "OPEN",
          "resolution": "UNRESOLVED",
          "mitigation_review_status": "NONE",
          "new": false,
          "resolution_status": "NONE",
          "last_seen_date": "2024-12-26T06:03:30.031Z"
        },
        "finding_details": {
          "severity": 3,
          "cwe": {
            "id": 327,
            "name": "Use of a Broken or Risky Cryptographic Algorithm",
            "href": "https://api.veracode.com/appsec/v1/cwes/327"
          },
          "module": "system.configuration.configurationmanager.dll",
          "relative_location": 15,
          "finding_category": {
            "id": 12,
            "name": "Cryptographic Issues",
            "href": "https://api.veracode.com/appsec/v1/categories/12"
          },
          "procedure": "system_configuration_configurationmanager_dll.System.Security.IdentityHelper.GetStrongHashSuitableForObjectName",
          "exploitability": 1,
          "attack_vector": "system_security_cryptography_algorithms_dll.System.Security.Cryptography.SHA1.Create",
          "file_line_number": 1
        },
        "build_id": 45002049
      },
      {
        "issue_id": 32,
        "scan_type": "STATIC",
        "description": "<span>The span.set() method reads and/or stores sensitive information (such as passwords) unencrypted in memory, making the data more susceptible to compromise. Even in cases where the variable goes out of scope, the sensitive data remains in volatile memory until that memory is reallocated.  Generally an attacker needs local access to the system in order to exploit this type of flaw by attaching to the process with a debugger or examining a core dump or swap file.</span> <span>Try to avoid storing sensitive data in plaintext.  When possible, always clear sensitive data after use by zeroing out the memory.  In languages that do not provide a mechanism for zeroing out memory, such as Java or C#, try to avoid using immutable types when handling sensitive information.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/316.html\">CWE</a></span>",
        "count": 1,
        "context_type": "APPLICATION",
        "context_guid": "9fb4b899-3162-45b8-a889-5008f482d54b",
        "violates_policy": false,
        "finding_status": {
          "first_found_date": "2024-11-25T10:47:11.498Z",
          "status": "OPEN",
          "resolution": "UNRESOLVED",
          "mitigation_review_status": "NONE",
          "new": false,
          "resolution_status": "NONE",
          "last_seen_date": "2024-12-26T06:03:30.031Z"
        },
        "finding_details": {
          "severity": 3,
          "cwe": {
            "id": 316,
            "name": "Cleartext Storage of Sensitive Information in Memory",
            "href": "https://api.veracode.com/appsec/v1/cwes/316"
          },
          "module": "microsoft.identity.client.dll",
          "relative_location": 25,
          "finding_category": {
            "id": 12,
            "name": "Cryptographic Issues",
            "href": "https://api.veracode.com/appsec/v1/categories/12"
          },
          "procedure": "microsoft_identity_client_dll.Microsoft.Identity.Client.ConfidentialClientApplicationOptions.set_ClientSecret",
          "exploitability": 0,
          "attack_vector": "<ClientSecret>k__BackingField",
          "file_line_number": 1
        },
        "build_id": 45002049
      },
      {
        "issue_id": 31,
        "scan_type": "STATIC",
        "description": "<span>Windows will search the entire path for a program if the full path is not set explicitly.  This could allow trojans or other malicious code to be executed instead. Also, be sure that a file extension is specified, since otherwise multiple extensions will be tried by the operating system. For example, .com programs will run before .exe programs, providing an opportunity for program substitution.</span> <span>Ensure that a full path is provided specifying the program to be executed.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/427.html\">CWE</a></span>",
        "count": 1,
        "context_type": "APPLICATION",
        "context_guid": "9fb4b899-3162-45b8-a889-5008f482d54b",
        "violates_policy": false,
        "finding_status": {
          "first_found_date": "2024-11-25T10:47:11.498Z",
          "status": "OPEN",
          "resolution": "UNRESOLVED",
          "mitigation_review_status": "NONE",
          "new": false,
          "resolution_status": "NONE",
          "last_seen_date": "2024-12-26T06:03:30.031Z"
        },
        "finding_details": {
          "severity": 3,
          "cwe": {
            "id": 427,
            "name": "Uncontrolled Search Path Element",
            "href": "https://api.veracode.com/appsec/v1/cwes/427"
          },
          "module": "microsoft.identity.client.dll",
          "relative_location": 79,
          "finding_category": {
            "id": 2,
            "name": "Untrusted Search Path",
            "href": "https://api.veracode.com/appsec/v1/categories/2"
          },
          "procedure": "microsoft_identity_client_dll.Microsoft.Identity.Client.SystemWebViewOptions._3COpenWithChromeEdgeBrowserAsync_3Ed__28.MoveNext",
          "exploitability": 0,
          "attack_vector": "system_diagnostics_process_dll.System.Diagnostics.Process.Start",
          "file_line_number": 1
        },
        "build_id": 45002049
      },
      {
        "issue_id": 116,
        "scan_type": "STATIC",
        "description": "<span>The span.set() method reads and/or stores sensitive information (such as passwords) unencrypted in memory, making the data more susceptible to compromise. Even in cases where the variable goes out of scope, the sensitive data remains in volatile memory until that memory is reallocated.  Generally an attacker needs local access to the system in order to exploit this type of flaw by attaching to the process with a debugger or examining a core dump or swap file.</span> <span>Try to avoid storing sensitive data in plaintext.  When possible, always clear sensitive data after use by zeroing out the memory.  In languages that do not provide a mechanism for zeroing out memory, such as Java or C#, try to avoid using immutable types when handling sensitive information.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/316.html\">CWE</a></span>",
        "count": 1,
        "context_type": "APPLICATION",
        "context_guid": "9fb4b899-3162-45b8-a889-5008f482d54b",
        "violates_policy": false,
        "finding_status": {
          "first_found_date": "2024-12-24T05:15:34.946Z",
          "status": "OPEN",
          "resolution": "UNRESOLVED",
          "mitigation_review_status": "NONE",
          "new": false,
          "resolution_status": "NONE",
          "last_seen_date": "2024-12-26T06:03:30.031Z"
        },
        "finding_details": {
          "severity": 3,
          "cwe": {
            "id": 316,
            "name": "Cleartext Storage of Sensitive Information in Memory",
            "href": "https://api.veracode.com/appsec/v1/cwes/316"
          },
          "module": "microsoft.identity.client.dll",
          "relative_location": 53,
          "finding_category": {
            "id": 12,
            "name": "Cryptographic Issues",
            "href": "https://api.veracode.com/appsec/v1/categories/12"
          },
          "procedure": "microsoft_identity_client_dll.Microsoft.Identity.Client.WsTrust.CommonNonInteractiveHandler.PerformWsTrustMexExchangeAsync",
          "exploitability": 0,
          "attack_vector": "password",
          "file_line_number": 1
        },
        "build_id": 45002049
      },
      {
        "issue_id": 117,
        "scan_type": "STATIC",
        "description": "<span>The span.set() method reads and/or stores sensitive information (such as passwords) unencrypted in memory, making the data more susceptible to compromise. Even in cases where the variable goes out of scope, the sensitive data remains in volatile memory until that memory is reallocated.  Generally an attacker needs local access to the system in order to exploit this type of flaw by attaching to the process with a debugger or examining a core dump or swap file.</span> <span>Try to avoid storing sensitive data in plaintext.  When possible, always clear sensitive data after use by zeroing out the memory.  In languages that do not provide a mechanism for zeroing out memory, such as Java or C#, try to avoid using immutable types when handling sensitive information.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/316.html\">CWE</a></span>",
        "count": 1,
        "context_type": "APPLICATION",
        "context_guid": "9fb4b899-3162-45b8-a889-5008f482d54b",
        "violates_policy": false,
        "finding_status": {
          "first_found_date": "2024-12-24T05:15:34.946Z",
          "status": "OPEN",
          "resolution": "UNRESOLVED",
          "mitigation_review_status": "NONE",
          "new": false,
          "resolution_status": "NONE",
          "last_seen_date": "2024-12-26T06:03:30.031Z"
        },
        "finding_details": {
          "severity": 3,
          "cwe": {
            "id": 316,
            "name": "Cleartext Storage of Sensitive Information in Memory",
            "href": "https://api.veracode.com/appsec/v1/cwes/316"
          },
          "module": "microsoft.identity.client.dll",
          "relative_location": 58,
          "finding_category": {
            "id": 12,
            "name": "Cryptographic Issues",
            "href": "https://api.veracode.com/appsec/v1/categories/12"
          },
          "procedure": "microsoft_identity_client_dll.Microsoft.Identity.Client.WsTrust.CommonNonInteractiveHandler.GetWsTrustResponseAsync",
          "exploitability": 0,
          "attack_vector": "password",
          "file_line_number": 1
        },
        "build_id": 45002049
      },
      {
        "issue_id": 33,
        "scan_type": "STATIC",
        "description": "<span>Windows will search the entire path for a program if the full path is not set explicitly.  This could allow trojans or other malicious code to be executed instead. Also, be sure that a file extension is specified, since otherwise multiple extensions will be tried by the operating system. For example, .com programs will run before .exe programs, providing an opportunity for program substitution.</span> <span>Ensure that a full path is provided specifying the program to be executed.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/427.html\">CWE</a></span>",
        "count": 1,
        "context_type": "APPLICATION",
        "context_guid": "9fb4b899-3162-45b8-a889-5008f482d54b",
        "violates_policy": false,
        "finding_status": {
          "first_found_date": "2024-11-25T10:47:11.498Z",
          "status": "OPEN",
          "resolution": "UNRESOLVED",
          "mitigation_review_status": "NONE",
          "new": false,
          "resolution_status": "NONE",
          "last_seen_date": "2024-12-26T06:03:30.031Z"
        },
        "finding_details": {
          "severity": 3,
          "cwe": {
            "id": 427,
            "name": "Uncontrolled Search Path Element",
            "href": "https://api.veracode.com/appsec/v1/cwes/427"
          },
          "module": "microsoft.identity.client.dll",
          "relative_location": 90,
          "finding_category": {
            "id": 2,
            "name": "Untrusted Search Path",
            "href": "https://api.veracode.com/appsec/v1/categories/2"
          },
          "procedure": "microsoft_identity_client_dll.Microsoft.Identity.Client.Platforms.netcore.NetCorePlatformProxy.StartDefaultOsBrowserAsync",
          "exploitability": 0,
          "attack_vector": "system_diagnostics_process_dll.System.Diagnostics.Process.Start",
          "file_line_number": 1
        },
        "build_id": 45002049
      },
      {
        "issue_id": 118,
        "scan_type": "STATIC",
        "description": "<span>The span.set() method reads and/or stores sensitive information (such as passwords) unencrypted in memory, making the data more susceptible to compromise. Even in cases where the variable goes out of scope, the sensitive data remains in volatile memory until that memory is reallocated.  Generally an attacker needs local access to the system in order to exploit this type of flaw by attaching to the process with a debugger or examining a core dump or swap file.</span> <span>Try to avoid storing sensitive data in plaintext.  When possible, always clear sensitive data after use by zeroing out the memory.  In languages that do not provide a mechanism for zeroing out memory, such as Java or C#, try to avoid using immutable types when handling sensitive information.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/316.html\">CWE</a></span>",
        "count": 1,
        "context_type": "APPLICATION",
        "context_guid": "9fb4b899-3162-45b8-a889-5008f482d54b",
        "violates_policy": false,
        "finding_status": {
          "first_found_date": "2024-12-24T05:15:34.946Z",
          "status": "OPEN",
          "resolution": "UNRESOLVED",
          "mitigation_review_status": "NONE",
          "new": false,
          "resolution_status": "NONE",
          "last_seen_date": "2024-12-26T06:03:30.031Z"
        },
        "finding_details": {
          "severity": 3,
          "cwe": {
            "id": 316,
            "name": "Cleartext Storage of Sensitive Information in Memory",
            "href": "https://api.veracode.com/appsec/v1/cwes/316"
          },
          "module": "microsoft.identity.client.dll",
          "relative_location": 73,
          "finding_category": {
            "id": 12,
            "name": "Cryptographic Issues",
            "href": "https://api.veracode.com/appsec/v1/categories/12"
          },
          "procedure": "microsoft_identity_client_dll.Microsoft.Identity.Client.ManagedIdentity.AppServiceManagedIdentitySource.!ctor",
          "exploitability": 0,
          "attack_vector": "_secret",
          "file_line_number": 1
        },
        "build_id": 45002049
      },
      {
        "issue_id": 34,
        "scan_type": "STATIC",
        "description": "<span>Standard random number generators do not provide a sufficient amount of entropy when used for security purposes. Attackers can brute force the output of pseudorandom number generators such as rand().</span> <span>If this random number is used where security is a concern, such as generating a session key or session identifier, use a trusted cryptographic random number generator instead.  These can be found on the Windows platform in the CryptoAPI or in an open source library such as OpenSSL.  In Java, use the SecureRandom object to ensure sufficient entropy.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/331.html\">CWE</a></span>",
        "count": 1,
        "context_type": "APPLICATION",
        "context_guid": "9fb4b899-3162-45b8-a889-5008f482d54b",
        "violates_policy": false,
        "finding_status": {
          "first_found_date": "2024-11-25T10:47:11.498Z",
          "status": "OPEN",
          "resolution": "UNRESOLVED",
          "mitigation_review_status": "NONE",
          "new": false,
          "resolution_status": "NONE",
          "last_seen_date": "2024-12-26T06:03:30.031Z"
        },
        "finding_details": {
          "severity": 3,
          "cwe": {
            "id": 331,
            "name": "Insufficient Entropy",
            "href": "https://api.veracode.com/appsec/v1/cwes/331"
          },
          "module": "microsoft.identity.client.dll",
          "relative_location": 45,
          "finding_category": {
            "id": 12,
            "name": "Cryptographic Issues",
            "href": "https://api.veracode.com/appsec/v1/categories/12"
          },
          "procedure": "microsoft_identity_client_dll.Microsoft.Identity.Client.Internal.SilentRequestHelper.GetRefreshOnWithJitter",
          "exploitability": -1,
          "attack_vector": "system_runtime_dll.System.Random.Next",
          "file_line_number": 1
        },
        "build_id": 45002049
      },
      {
        "issue_id": 35,
        "scan_type": "STATIC",
        "description": "<span>The span.set() method reads and/or stores sensitive information (such as passwords) unencrypted in memory, making the data more susceptible to compromise. Even in cases where the variable goes out of scope, the sensitive data remains in volatile memory until that memory is reallocated.  Generally an attacker needs local access to the system in order to exploit this type of flaw by attaching to the process with a debugger or examining a core dump or swap file.</span> <span>Try to avoid storing sensitive data in plaintext.  When possible, always clear sensitive data after use by zeroing out the memory.  In languages that do not provide a mechanism for zeroing out memory, such as Java or C#, try to avoid using immutable types when handling sensitive information.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/316.html\">CWE</a></span>",
        "count": 1,
        "context_type": "APPLICATION",
        "context_guid": "9fb4b899-3162-45b8-a889-5008f482d54b",
        "violates_policy": false,
        "finding_status": {
          "first_found_date": "2024-11-25T10:47:11.498Z",
          "status": "OPEN",
          "resolution": "UNRESOLVED",
          "mitigation_review_status": "NONE",
          "new": false,
          "resolution_status": "NONE",
          "last_seen_date": "2024-12-26T06:03:30.031Z"
        },
        "finding_details": {
          "severity": 3,
          "cwe": {
            "id": 316,
            "name": "Cleartext Storage of Sensitive Information in Memory",
            "href": "https://api.veracode.com/appsec/v1/cwes/316"
          },
          "module": "microsoft.identity.client.dll",
          "relative_location": 57,
          "finding_category": {
            "id": 12,
            "name": "Cryptographic Issues",
            "href": "https://api.veracode.com/appsec/v1/categories/12"
          },
          "procedure": "microsoft_identity_client_dll.Microsoft.Identity.Client.Internal.ClientCredential.SecretStringClientCredential.!ctor",
          "exploitability": 0,
          "attack_vector": "<Secret>k__BackingField",
          "file_line_number": 1
        },
        "build_id": 45002049
      },
      {
        "issue_id": 38,
        "scan_type": "STATIC",
        "description": "<span>This variable assignment uses a hard-coded password that may compromise system security in a way that cannot be easily remedied.  The use of a hard-coded password significantly increases the possibility that the account being protected will be compromised.  Moreover, the password cannot be changed without patching the software.  If a hard-coded password is compromised in a commercial product, all deployed instances may be vulnerable to attack.  In some cases, this finding may indicate a reference to a password (e.g. the name of a key in a properties file) rather than an actual password. CredentialType</span> <span>Store passwords out-of-band from the application code.  Follow best practices for protecting credentials stored in locations such as configuration or properties files. An HSM may be appropriate for particularly sensitive credentials.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/259.html\">CWE</a></span>",
        "count": 1,
        "context_type": "APPLICATION",
        "context_guid": "9fb4b899-3162-45b8-a889-5008f482d54b",
        "violates_policy": false,
        "finding_status": {
          "first_found_date": "2024-11-25T10:47:11.498Z",
          "status": "OPEN",
          "resolution": "UNRESOLVED",
          "mitigation_review_status": "NONE",
          "new": false,
          "resolution_status": "NONE",
          "last_seen_date": "2024-12-26T06:03:30.031Z"
        },
        "finding_details": {
          "severity": 3,
          "cwe": {
            "id": 259,
            "name": "Use of Hard-coded Password",
            "href": "https://api.veracode.com/appsec/v1/cwes/259"
          },
          "module": "microsoft.identity.client.dll",
          "relative_location": 11,
          "finding_category": {
            "id": 10,
            "name": "Credentials Management",
            "href": "https://api.veracode.com/appsec/v1/categories/10"
          },
          "procedure": "microsoft_identity_client_dll.Microsoft.Identity.Client.Cache.Items.MsalAccessTokenCacheItem.!ctor",
          "exploitability": 1,
          "attack_vector": "CredentialType",
          "file_line_number": 1
        },
        "build_id": 45002049
      },
      {
        "issue_id": 120,
        "scan_type": "STATIC",
        "description": "<span>This variable assignment uses a hard-coded password that may compromise system security in a way that cannot be easily remedied.  The use of a hard-coded password significantly increases the possibility that the account being protected will be compromised.  Moreover, the password cannot be changed without patching the software.  If a hard-coded password is compromised in a commercial product, all deployed instances may be vulnerable to attack.  In some cases, this finding may indicate a reference to a password (e.g. the name of a key in a properties file) rather than an actual password. hardcodedpasswdset _credentialDescriptor</span> <span>Store passwords out-of-band from the application code.  Follow best practices for protecting credentials stored in locations such as configuration or properties files. An HSM may be appropriate for particularly sensitive credentials.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/259.html\">CWE</a></span>",
        "count": 1,
        "context_type": "APPLICATION",
        "context_guid": "9fb4b899-3162-45b8-a889-5008f482d54b",
        "violates_policy": false,
        "finding_status": {
          "first_found_date": "2024-12-24T05:15:34.946Z",
          "status": "OPEN",
          "resolution": "UNRESOLVED",
          "mitigation_review_status": "NONE",
          "new": false,
          "resolution_status": "NONE",
          "last_seen_date": "2024-12-26T06:03:30.031Z"
        },
        "finding_details": {
          "severity": 3,
          "cwe": {
            "id": 259,
            "name": "Use of Hard-coded Password",
            "href": "https://api.veracode.com/appsec/v1/cwes/259"
          },
          "module": "microsoft.identity.client.dll",
          "relative_location": 9,
          "finding_category": {
            "id": 10,
            "name": "Credentials Management",
            "href": "https://api.veracode.com/appsec/v1/categories/10"
          },
          "procedure": "microsoft_identity_client_dll.Microsoft.Identity.Client.Cache.Items.MsalAccessTokenCacheItem.InitCacheKey",
          "exploitability": 1,
          "attack_vector": "hardcodedpasswdset",
          "file_line_number": 1
        },
        "build_id": 45002049
      },
      {
        "issue_id": 119,
        "scan_type": "STATIC",
        "description": "<span>This variable assignment uses a hard-coded password that may compromise system security in a way that cannot be easily remedied.  The use of a hard-coded password significantly increases the possibility that the account being protected will be compromised.  Moreover, the password cannot be changed without patching the software.  If a hard-coded password is compromised in a commercial product, all deployed instances may be vulnerable to attack.  In some cases, this finding may indicate a reference to a password (e.g. the name of a key in a properties file) rather than an actual password. hardcodedpasswdset _credentialDescriptor</span> <span>Store passwords out-of-band from the application code.  Follow best practices for protecting credentials stored in locations such as configuration or properties files. An HSM may be appropriate for particularly sensitive credentials.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/259.html\">CWE</a></span>",
        "count": 1,
        "context_type": "APPLICATION",
        "context_guid": "9fb4b899-3162-45b8-a889-5008f482d54b",
        "violates_policy": false,
        "finding_status": {
          "first_found_date": "2024-12-24T05:15:34.946Z",
          "status": "OPEN",
          "resolution": "UNRESOLVED",
          "mitigation_review_status": "NONE",
          "new": false,
          "resolution_status": "NONE",
          "last_seen_date": "2024-12-26T06:03:30.031Z"
        },
        "finding_details": {
          "severity": 3,
          "cwe": {
            "id": 259,
            "name": "Use of Hard-coded Password",
            "href": "https://api.veracode.com/appsec/v1/cwes/259"
          },
          "module": "microsoft.identity.client.dll",
          "relative_location": 41,
          "finding_category": {
            "id": 10,
            "name": "Credentials Management",
            "href": "https://api.veracode.com/appsec/v1/categories/10"
          },
          "procedure": "microsoft_identity_client_dll.Microsoft.Identity.Client.Cache.Items.MsalAccessTokenCacheItem.InitCacheKey",
          "exploitability": 1,
          "attack_vector": "hardcodedpasswdset",
          "file_line_number": 1
        },
        "build_id": 45002049
      },
      {
        "issue_id": 39,
        "scan_type": "STATIC",
        "description": "<span>The span.set() method reads and/or stores sensitive information (such as passwords) unencrypted in memory, making the data more susceptible to compromise. Even in cases where the variable goes out of scope, the sensitive data remains in volatile memory until that memory is reallocated.  Generally an attacker needs local access to the system in order to exploit this type of flaw by attaching to the process with a debugger or examining a core dump or swap file.</span> <span>Try to avoid storing sensitive data in plaintext.  When possible, always clear sensitive data after use by zeroing out the memory.  In languages that do not provide a mechanism for zeroing out memory, such as Java or C#, try to avoid using immutable types when handling sensitive information.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/316.html\">CWE</a></span>",
        "count": 1,
        "context_type": "APPLICATION",
        "context_guid": "9fb4b899-3162-45b8-a889-5008f482d54b",
        "violates_policy": false,
        "finding_status": {
          "first_found_date": "2024-11-25T10:47:11.498Z",
          "status": "OPEN",
          "resolution": "UNRESOLVED",
          "mitigation_review_status": "NONE",
          "new": false,
          "resolution_status": "NONE",
          "last_seen_date": "2024-12-26T06:03:30.031Z"
        },
        "finding_details": {
          "severity": 3,
          "cwe": {
            "id": 316,
            "name": "Cleartext Storage of Sensitive Information in Memory",
            "href": "https://api.veracode.com/appsec/v1/cwes/316"
          },
          "module": "microsoft.identity.client.dll",
          "relative_location": 25,
          "finding_category": {
            "id": 12,
            "name": "Cryptographic Issues",
            "href": "https://api.veracode.com/appsec/v1/categories/12"
          },
          "procedure": "microsoft_identity_client_dll.Microsoft.Identity.Client.Cache.Items.MsalCredentialCacheItemBase.set_CredentialType",
          "exploitability": 0,
          "attack_vector": "<CredentialType>k__BackingField",
          "file_line_number": 1
        },
        "build_id": 45002049
      },
      {
        "issue_id": 40,
        "scan_type": "STATIC",
        "description": "<span>The span.set() method reads and/or stores sensitive information (such as passwords) unencrypted in memory, making the data more susceptible to compromise. Even in cases where the variable goes out of scope, the sensitive data remains in volatile memory until that memory is reallocated.  Generally an attacker needs local access to the system in order to exploit this type of flaw by attaching to the process with a debugger or examining a core dump or swap file.</span> <span>Try to avoid storing sensitive data in plaintext.  When possible, always clear sensitive data after use by zeroing out the memory.  In languages that do not provide a mechanism for zeroing out memory, such as Java or C#, try to avoid using immutable types when handling sensitive information.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/316.html\">CWE</a></span>",
        "count": 1,
        "context_type": "APPLICATION",
        "context_guid": "9fb4b899-3162-45b8-a889-5008f482d54b",
        "violates_policy": false,
        "finding_status": {
          "first_found_date": "2024-11-25T10:47:11.498Z",
          "status": "OPEN",
          "resolution": "UNRESOLVED",
          "mitigation_review_status": "NONE",
          "new": false,
          "resolution_status": "NONE",
          "last_seen_date": "2024-12-26T06:03:30.031Z"
        },
        "finding_details": {
          "severity": 3,
          "cwe": {
            "id": 316,
            "name": "Cleartext Storage of Sensitive Information in Memory",
            "href": "https://api.veracode.com/appsec/v1/cwes/316"
          },
          "module": "microsoft.identity.client.dll",
          "relative_location": 25,
          "finding_category": {
            "id": 12,
            "name": "Cryptographic Issues",
            "href": "https://api.veracode.com/appsec/v1/categories/12"
          },
          "procedure": "microsoft_identity_client_dll.Microsoft.Identity.Client.Cache.Items.MsalCredentialCacheItemBase.set_Secret",
          "exploitability": 0,
          "attack_vector": "<Secret>k__BackingField",
          "file_line_number": 1
        },
        "build_id": 45002049
      },
      {
        "issue_id": 41,
        "scan_type": "STATIC",
        "description": "<span>This variable assignment uses a hard-coded password that may compromise system security in a way that cannot be easily remedied.  The use of a hard-coded password significantly increases the possibility that the account being protected will be compromised.  Moreover, the password cannot be changed without patching the software.  If a hard-coded password is compromised in a commercial product, all deployed instances may be vulnerable to attack.  In some cases, this finding may indicate a reference to a password (e.g. the name of a key in a properties file) rather than an actual password. CredentialType</span> <span>Store passwords out-of-band from the application code.  Follow best practices for protecting credentials stored in locations such as configuration or properties files. An HSM may be appropriate for particularly sensitive credentials.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/259.html\">CWE</a></span>",
        "count": 1,
        "context_type": "APPLICATION",
        "context_guid": "9fb4b899-3162-45b8-a889-5008f482d54b",
        "violates_policy": false,
        "finding_status": {
          "first_found_date": "2024-11-25T10:47:11.498Z",
          "status": "OPEN",
          "resolution": "UNRESOLVED",
          "mitigation_review_status": "NONE",
          "new": false,
          "resolution_status": "NONE",
          "last_seen_date": "2024-12-26T06:03:30.031Z"
        },
        "finding_details": {
          "severity": 3,
          "cwe": {
            "id": 259,
            "name": "Use of Hard-coded Password",
            "href": "https://api.veracode.com/appsec/v1/cwes/259"
          },
          "module": "microsoft.identity.client.dll",
          "relative_location": 29,
          "finding_category": {
            "id": 10,
            "name": "Credentials Management",
            "href": "https://api.veracode.com/appsec/v1/categories/10"
          },
          "procedure": "microsoft_identity_client_dll.Microsoft.Identity.Client.Cache.Items.MsalIdTokenCacheItem.!ctor",
          "exploitability": 1,
          "attack_vector": "CredentialType",
          "file_line_number": 1
        },
        "build_id": 45002049
      },
      {
        "issue_id": 42,
        "scan_type": "STATIC",
        "description": "<span>This variable assignment uses a hard-coded password that may compromise system security in a way that cannot be easily remedied.  The use of a hard-coded password significantly increases the possibility that the account being protected will be compromised.  Moreover, the password cannot be changed without patching the software.  If a hard-coded password is compromised in a commercial product, all deployed instances may be vulnerable to attack.  In some cases, this finding may indicate a reference to a password (e.g. the name of a key in a properties file) rather than an actual password. CredentialType</span> <span>Store passwords out-of-band from the application code.  Follow best practices for protecting credentials stored in locations such as configuration or properties files. An HSM may be appropriate for particularly sensitive credentials.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/259.html\">CWE</a></span>",
        "count": 1,
        "context_type": "APPLICATION",
        "context_guid": "9fb4b899-3162-45b8-a889-5008f482d54b",
        "violates_policy": false,
        "finding_status": {
          "first_found_date": "2024-11-25T10:47:11.498Z",
          "status": "OPEN",
          "resolution": "UNRESOLVED",
          "mitigation_review_status": "NONE",
          "new": false,
          "resolution_status": "NONE",
          "last_seen_date": "2024-12-26T06:03:30.031Z"
        },
        "finding_details": {
          "severity": 3,
          "cwe": {
            "id": 259,
            "name": "Use of Hard-coded Password",
            "href": "https://api.veracode.com/appsec/v1/cwes/259"
          },
          "module": "microsoft.identity.client.dll",
          "relative_location": 66,
          "finding_category": {
            "id": 10,
            "name": "Credentials Management",
            "href": "https://api.veracode.com/appsec/v1/categories/10"
          },
          "procedure": "microsoft_identity_client_dll.Microsoft.Identity.Client.Cache.Items.MsalRefreshTokenCacheItem.!ctor",
          "exploitability": 1,
          "attack_vector": "CredentialType",
          "file_line_number": 1
        },
        "build_id": 45002049
      },
      {
        "issue_id": 115,
        "scan_type": "STATIC",
        "description": "<span>The span.set() method reads and/or stores sensitive information (such as passwords) unencrypted in memory, making the data more susceptible to compromise. Even in cases where the variable goes out of scope, the sensitive data remains in volatile memory until that memory is reallocated.  Generally an attacker needs local access to the system in order to exploit this type of flaw by attaching to the process with a debugger or examining a core dump or swap file.</span> <span>Try to avoid storing sensitive data in plaintext.  When possible, always clear sensitive data after use by zeroing out the memory.  In languages that do not provide a mechanism for zeroing out memory, such as Java or C#, try to avoid using immutable types when handling sensitive information.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/316.html\">CWE</a></span>",
        "count": 1,
        "context_type": "APPLICATION",
        "context_guid": "9fb4b899-3162-45b8-a889-5008f482d54b",
        "violates_policy": false,
        "finding_status": {
          "first_found_date": "2024-12-24T05:15:34.946Z",
          "status": "OPEN",
          "resolution": "UNRESOLVED",
          "mitigation_review_status": "NONE",
          "new": false,
          "resolution_status": "NONE",
          "last_seen_date": "2024-12-26T06:03:30.031Z"
        },
        "finding_details": {
          "severity": 3,
          "cwe": {
            "id": 316,
            "name": "Cleartext Storage of Sensitive Information in Memory",
            "href": "https://api.veracode.com/appsec/v1/cwes/316"
          },
          "module": "microsoft.identity.client.dll",
          "relative_location": 25,
          "finding_category": {
            "id": 12,
            "name": "Cryptographic Issues",
            "href": "https://api.veracode.com/appsec/v1/categories/12"
          },
          "procedure": "microsoft_identity_client_dll.Microsoft.Identity.Client.ApiConfig.Parameters.AcquireTokenByUsernamePasswordParameters.set_Password",
          "exploitability": 0,
          "attack_vector": "<Password>k__BackingField",
          "file_line_number": 1
        },
        "build_id": 45002049
      }
    ]
  },
  "_links": {
    "self": {
      "href": "https://api.veracode.com/appsec/v2/applications/9fb4b899-3162-45b8-a889-5008f482d54b/findings?scan_type=STATIC{&context,severity,severity_gte,cwe,finding_category,cvss,cvss_gte,cve,violates_policy,include_annot,new,include_exp_date,mitigated_after,sca_scan_mode,sca_dep_mode}",
      "templated": true
    },
    "application": {
      "href": "https://api.veracode.com/appsec/v1/applications/9fb4b899-3162-45b8-a889-5008f482d54b"
    },
    "sca": {
      "href": "https://api.veracode.com/appsec/v2/applications/9fb4b899-3162-45b8-a889-5008f482d54b/findings?scan_type=SCA{&context,severity,severity_gte,cwe,finding_category,cvss,cvss_gte,cve,violates_policy,include_annot,new,include_exp_date,mitigated_after,sca_scan_mode,sca_dep_mode}",
      "templated": true
    }
  },
  "page": {
    "size": 20,
    "total_elements": 18,
    "total_pages": 1,
    "number": 0
  }
}